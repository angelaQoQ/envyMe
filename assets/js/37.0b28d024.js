(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{211:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_3-响应式原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-响应式原理","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.响应式原理")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("修改视图影响内存数据,内存数据同步到页面其他内容,就是Vue中的响应式数据.")])]),t._v(" "),a("li",[a("p",[t._v("说Vue的响应式原理前要先搞清楚下面几个问题")])])]),t._v(" "),a("h4",{attrs:{id:"_1-发布订阅者模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-发布订阅者模式","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. "),a("code",[t._v("发布订阅者模式")])]),t._v(" "),a("h4",{attrs:{id:"_2-依赖收集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-依赖收集","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. "),a("code",[t._v("依赖收集")])]),t._v(" "),a("h4",{attrs:{id:"_3-数据劫持"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-数据劫持","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. "),a("code",[t._v("数据劫持")])]),t._v(" "),a("h2",{attrs:{id:"_3-1-发布订阅者模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-发布订阅者模式","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.1 发布订阅者模式")]),t._v(" "),a("p",[t._v("如同微信公众号推送每日文章,某公众号管理者先将文章推送到消息通道,然后微信消息通道再把该文章推送给订阅的用户.其中:")]),t._v(" "),a("ol",[a("li",[t._v("参与角色:\n"),a("ul",[a("li",[a("code",[t._v("发布者")]),t._v(":就是公众号管理者")]),t._v(" "),a("li",[a("code",[t._v("订阅者")]),t._v(":就是订阅的用户")]),t._v(" "),a("li",[a("code",[t._v("消息通道")]),t._v(":"),a("br"),t._v("他们之间并不是直接发送获取数据,而是通过"),a("code",[t._v("消息通道")]),t._v("进行统一管理.\n"),a("br"),t._v(" "),a("br")])])]),t._v(" "),a("li",[t._v("发布订阅者的\n"),a("ul",[a("li",[t._v("优点:\n"),a("ul",[a("li",[a("code",[t._v("解耦")]),t._v(". 发布者和订阅者"),a("code",[t._v("没有直接关联,不会直接相互影响,可以独立的管理和维护")]),t._v(";")]),t._v(" "),a("li",[a("code",[t._v("性能")]),t._v(". 发布者不需要等待订阅者的成功接受响应,减少很多业务等待时间;")]),t._v(" "),a("li",[a("code",[t._v("方便管理维护")]),t._v(". 发布者和订阅者通过 消息发布结构关联,可以通过 消息通道进行 测试.")])])]),t._v(" "),a("li",[t._v("缺点:\n"),a("ul",[a("li",[t._v("单向通信造成 发布者无法确定订阅者是否接受到了订阅内容.\n"),a("br"),t._v(" "),a("br")])])])])]),t._v(" "),a("li",[t._v("适宜场景:\n"),a("ol",[a("li",[t._v("数量庞大的订阅者")]),t._v(" "),a("li",[t._v("发布者需要与多方交互,如"),a("strong",[t._v("vue中 修改数据时 同步内存,同步DOM,同步虚拟DOM")])]),t._v(" "),a("li",[t._v("不关心订阅者的响应\n"),a("br"),t._v(" "),a("br")])])]),t._v(" "),a("li",[t._v("与观察者模式的区别:")])]),t._v(" "),a("ul",[a("li",[t._v("发布订阅是观察者的一种变体")]),t._v(" "),a("li",[t._v("发布订阅使用异步消息队列实现, 观察者使用同步方式实现")]),t._v(" "),a("li",[t._v("发布订阅可以把 发布服务器 , 订阅服务器 部署在不同的应用中")])]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"_3-2-依赖收集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-依赖收集","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.2 依赖收集")]),t._v(" "),a("p",[t._v("依赖什么意思 ?")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("vm.data中的数据是响应式的")]),t._v(" "),a("br"),t._v("举栗: vm.data中有个变量叫ABC, 它是响应式的. "),a("strong",[t._v("但凡是和ABC有关系的,有一个算一个都叫ABC的订阅者")])])]),t._v(" "),a("li",[a("p",[t._v("ABC怎么个响应式呢? "),a("br"),t._v("  简单点说: 用户通过触发事件修改了ABC,页面上所有使用了ABC的Dom都会自动更新.")])]),t._v(" "),a("li",[a("p",[t._v("我们一步步来分析:")]),t._v(" "),a("ol",[a("li",[t._v("修改vm.data中变量 ---\x3e 会触发vm.data对象中的setter ----\x3e 所以可以在ABC的"),a("code",[t._v("setter函数中触发DOM更新")])]),t._v(" "),a("li",[t._v("由1引出另外一个问题: 我怎么知道有哪些用过ABC的DOM结构?\n"),a("br"),t._v(" 只要用过变量ABC,就会触发ABC的getter,"),a("code",[t._v("getter里收集对ABC产生依赖的订阅者!")]),t._v(",天才!")])])])]),t._v(" "),a("p",[a("br"),t._v("getter和setter是啥? 向下看")]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"_3-3-数据劫持"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-数据劫持","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.3 数据劫持")]),t._v(" "),a("p",[t._v("刚才 3.2中说道 getter可以收集数据的所有依赖, setter可以把最新数据更新到所有依赖中")]),t._v(" "),a("ul",[a("li",[t._v("ES5新增了Object方法: defineProperty.所以对IE9以下不支持这个属性的变量---- IE9以下不支持VUE")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n    * 语法\n    *   Object.defineProperty(obj, prop, descriptor)\n    *\n    * 参数\n    *   obj\n    *       要在其上定义属性的对象。\n    *   prop\n    *       要定义或修改的属性的名称。\n    *   descriptor\n    *       将被定义或修改的属性描述符。\n    */")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" o2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置对象")]),t._v("\n    Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" o2 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        configurable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//当且仅当该属性的 configurable 为 true 时，该属性描述符才能够被改变")]),t._v("\n        enumerable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//当且仅当该属性的enumerable为true时，该属性才能够出现在对象的枚举属性中")]),t._v("\n        writable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//当且仅当该属性的writable为true时，value才能被赋值运算符改变")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在执行o2.b时,这里会调用")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//接受唯一参数，即该属性新的参数值。")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在执行o2.b = * 时,这里会调用")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("         \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br")])]),a("ul",[a("li",[a("strong",[a("code",[t._v("getter")])]),t._v(": 对修改后的对象属性中 get 方法拟人化")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("setter")])]),t._v(": 对修改后的对象属性中 set 方法拟人化")])]),t._v(" "),a("h2",{attrs:{id:"_3-4-响应式原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-响应式原理","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.4 响应式原理")]),t._v(" "),a("p",[t._v("一句话:  组件初始化时,Vue遍历对象参数中data属性, 将所有属性/变量添加getter和setter,")]),t._v(" "),a("ul",[a("li",[t._v("在虚拟DOM获取变量值时 利用变量的getter 整理出该变量的所有订阅者,存入数组.")]),t._v(" "),a("li",[t._v("在修改变量时, 触发setter, 遍历该变量的所有订阅者, 并将最新的变量值传给各个订阅者.")])]),t._v(" "),a("p",[a("strong",[t._v("getter 整理收集变量的依赖(订阅者)")]),t._v(" "),a("br"),t._v(" "),a("strong",[t._v("setter 触发变量依赖的数据更新")])])])},[],!1,null,null,null);s.default=e.exports}}]);